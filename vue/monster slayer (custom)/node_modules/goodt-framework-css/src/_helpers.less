.border-round() {
    border-radius: 99999999px;
}
/**
 * @param {int} @size   shadow size 1+
 */
.shadow(@size) {
    box-shadow: 0 1px * @size 4px * @size -2px rgba(0, 0, 0, 0.25);
}
/**
 * @param {float} @val    opacity value 0-1
 */
.opacity(@val) {
    @p: @val*100;
    filter: alpha(opacity= @p);
    opacity: @val;
}
/**
 * @param {ColorObject} @color  focus color object (hex, rgb, rgba, hsl) @default @color-focus 
 */
.focus-state(@color: @color-focus) {
    box-shadow+: if(iscolor(@color), 0 0 0 2px @color, none); 
}
/**
 * @param {ColorObject} @color color
 * @return new color
 */
.color-focus(@color) {
    @return: fade(@color, 30%);
}
/**
 * @param {ColorObject} @color color
 * @param {int} @step
 * @return new color
 */
.color-light(@color, @step: 1) {
    @return: lighten(@color, (10% + 10% * @step));
}
/**
 * @param {ColorObject} @color color
 * @return new color
 */
.color-dark(@color, @step: 1) {
    @return: darken(@color, (10% + 10% * @step));
}
/**
 * @param {ColorObject} @color  hover color object (hex, rgb, rgba, hsl)
 * @return new color
 */
.color-hover(@color) {
    @return: darken(@color, 5%);
}
/**
 * @param {XML} @svg    svg xml
 * @return url(...)
 */
.svg-image(@svg) {
    @i: escape(@svg);
    @return: url('data:image/svg+xml,@{i}');
}
/**
 * @param {string} @viewport-size     screen size in measure units (px, em, rem etc)
 * @param {string} @rules           css rules to be applied
 */
/*
 @example
.media(@viewport-m, {
    .my-class {
        color: #f00;
    }
});
*/
.media(@viewport-size, @rules) {
    @media only screen and (max-width: @viewport-size) {
        @rules();
    }
}
