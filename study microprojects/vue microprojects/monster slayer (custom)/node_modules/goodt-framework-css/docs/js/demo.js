(() => {
    let getCssVars = () => {
        let a = [];
        let s = Array.prototype.slice;
        let css = s.call(document.styleSheets).find(e => e.href.indexOf('all.css') > 0);
        let rule = s.call(css.rules).find(e => e.selectorText == ':root');
        for (let i = 0; i < rule.style.length; ++i) {
            let name = rule.style[i];
            let value = rule.style.getPropertyValue(name).trim();
            if (name.indexOf('--') === 0) {
                a.push({ name, value });
            }
        }
        return a;
    };
    let isColor = (c) => c.indexOf('#') == 0 || c.indexOf('rgb') == 0;
    let isRelUnit = (v) => {
        let l = String(v)
            .toLowerCase()
            .replace(/^([0-9.]+)/, '');
        return ['em', 'rem', '%', 'vw', 'vh'].includes(l);
    }
    let calcRelUnit = (v) => {
        testNode.style.width = v;
        return window.getComputedStyle(testNode).getPropertyValue('width');
    }
    let testNode = document.createElement('div');
    testNode.style.display = 'none';
    document.body.appendChild(testNode);

    new Vue({
        el: '#about-cssvars-table',
        data() {
            return {
                cssVars: getCssVars()
            };
        },
        methods: {
            isColor,
            isRelUnit,
            calcRelUnit,
        }
    });

    new Vue({
        el: '#about-lessvars-block',
        data() {
            return {
                meta: {}
            };
        },
        computed: {
            core() {
                return this.meta.core ? this.meta.core.vars : {};
            },
            components() {
                let obj = this.meta.components || {};
                let c = {};
                for (let cn in obj) {
                    if (Object.keys(obj[cn].vars).length) {
                        c[cn] = obj[cn].vars;
                    }
                }
                return c;
            }
        },
        created() {
            fetch('meta.json')
                .then(r => r.json())
                .then(d => (this.meta = d));
        },
        methods: {
            isColor,
            isRelUnit,
            calcRelUnit
        }
    });

    new Vue({
        el: '#grid-gap-demo',
        data() {
            return {
                hgap: 'l2',
                vgap: 'l2',
                numCols: 4
            };
        },
        computed: {
            cssVars() {
                return getCssVars();
            },
            fontSize() {
                var n = this.cssVars.find(({ name }) => name == '--font-size-base');
                return n ? +n.value.replace('px', '') : 0;
            },
            sizes() {
                let r = /--(spacer)(\d+)/;
                let rl = /--(spacer-layout)(\d+)/;
                let arr = this.cssVars
                    .filter(({ name }) => name.match(r) || name.match(rl))
                    .map(({ name, value }) => {
                        return {
                            name: name.replace(r, `$2`).replace(rl, `l$2`),
                            value: this.fontSize * Number(value.replace('rem', ''))
                        };
                    });
                return [{ name: 'none', value: '0' }, ...arr];
            }
        }
    });

    new Vue({
        el: '#padding-margin-size-panel',
        data() {
            return {
                size: null,
                type: 'pad',
                types: [
                    { label: 'padding', value: 'pad' },
                    { label: 'margin', value: 'mar' }
                ],
                cssVars: getCssVars(),
                directions: ['v', 'h', 'left', 'right', 'top', 'bot']
            };
        },
        computed: {
            fontSize() {
                var n = this.cssVars.find(({ name }) => name == '--font-size-base');
                return n ? +n.value.replace('px', '') : 0;
            },
            sizes() {
                return this.spacers.map(({ value }) => value).filter((el, i, arr) => arr.indexOf(el) === i);
            },
            sizeSpacers() {
                return this.spacers.filter(({ value }) => value == this.size);
            },
            spacers() {
                let r = /--(spacer)(\d+)/;
                let rl = /--(spacer-layout)(\d+)/;
                return this.cssVars
                    .filter(({ name }) => name.match(r) || name.match(rl))
                    .map(({ name, value }) => {
                        return {
                            name,
                            value: this.fontSize * Number(value.replace('rem', '')),
                            css(type, direction) {
                                let d = direction ? `-${direction}` : '';
                                return name.replace(r, `${type}${d}-$2`).replace(rl, `${type}${d}-l$2`);
                            }
                        };
                    });
            }
        }
    });
})();
