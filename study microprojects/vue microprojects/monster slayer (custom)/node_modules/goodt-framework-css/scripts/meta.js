let fs = require('fs');
let version = require('./../package.json').version;
let output = {
    paths: ['./dist', './docs'],
    file: 'meta.json'
};
let componentsDir = './src/components';
let fileData = path => fs.readFileSync(path, { encoding: 'utf8' });
let exportVars = (src, simpleValues = false) => {
    let r = '^@(.+?):\\s*(.+);( // (.+))?';
    let fm = src.match(new RegExp(r, 'gm'));
    return fm
        ? fm.reduce((obj, v) => {
              let m = v.match(new RegExp(r));
              let [_, key, value, d, descr] = m;
              if (!simpleValues || (simpleValues && !value.includes('@'))) {
                  obj[key] = { value, descr };
              }
              return obj;
          }, {})
        : [];
};
let exportHooks = src => {
    let r = /((\/\*\*([\W\w]+)\*\/)([\s\S]+?))?\.(hook-(.+))\s+{/gm;
    let fm = src.matchAll(r);
    return fm
        ? [...fm].reduce((obj, [_, m1, descr, m2, m3, hook]) => {
              obj[hook] = { descr };
              return obj;
          }, {})
        : [];
};

let vars = {
    core: { vars: exportVars(fileData('./src/_params.less')) },
    components: {}
};
fs.readdirSync(componentsDir).forEach(file => {
    let src = fileData(`${componentsDir}/${file}`);
    let name = file.split('.').shift();
    vars.components[name] = {
        vars: exportVars(src),
        hooks: exportHooks(src)
    };
});

output.paths.forEach(path => {
    fs.writeFileSync(`${path}/${output.file}`, JSON.stringify(vars));
    fs.writeFileSync(`${path}/version`, version);
});
